{
  "name": "故宫景点导游讲解",
  "nodes": [
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        480,
        620
      ],
      "id": "59723396-8903-4aa0-9451-473919318397",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        440,
        880
      ],
      "id": "d4d77224-8ac2-42e6-9b93-ece23a2e239a",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "swewjuzYX9Z3PE56",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "sseEndpoint": "https://mcp.amap.com/sse?key=9c9ca3dae905a1933ab48e60264e79c8"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        600,
        1020
      ],
      "id": "ad2d87de-3c71-4f4e-91db-23644aea49bc",
      "name": "MCP Client1"
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "text": "这个图片是什么景点， 以及请你查找历史典故， 历史电视剧的情节， 结合这些，像一位导游一样生动活泼的介绍 不少于300字",
        "inputType": "base64",
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -240,
        520
      ],
      "id": "0ec300f8-ab2c-4f26-8210-fd868729afd3",
      "name": "OpenAI1识别意图",
      "credentials": {
        "openAiApi": {
          "id": "swewjuzYX9Z3PE56",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.intent }}",
                    "rightValue": "讲解某个景点",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "2272103a-68b4-4d71-a51b-a7f30b7223a3"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ca3175df-4f5d-4229-950b-f4ba8728e13f",
                    "leftValue": "={{ $json.intent }}",
                    "rightValue": "查询景点列表",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        300,
        40
      ],
      "id": "e6eff3fc-bca3-4ff8-a70f-3b129000570c",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\n// 1. 从 AI Agent 返回的数组中提取第一个 message.content 字段\nconst raw = $json[\"message\"][\"content\"];\n\n\n// 2. 去除 Markdown 的 ```json 包裹\nconst cleaned = raw.replace(/```json\\s*([\\s\\S]*?)```/, '$1').trim();\n\ntry {\n  // 3. 尝试解析 JSON 字符串为对象\n  const parsed = JSON.parse(cleaned);\n\n  // 4. 返回解析后的结果（包含 intent, spot, chatInput）\n  return parsed;\n} catch (e) {\n  // 如果解析失败，返回默认空结构\n  return {\n    intent: \"解析失败\",\n    spot: null,\n    chatInput: null\n  };\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        100,
        140
      ],
      "id": "b0aba19b-246a-421c-8b1d-2bd77d15d593",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=你是一位专业的导游，请为景点“{{ $json.spot }}”生成一段生动的文字讲解。\n\n要求：\n- 包含景点的历史背景和用途\n- 至少一个真实的历史典故\n- 如果有的话 通过历史的电视剧讲解\n- 模拟真实导游的语气：有画面感、有感染力\n- 用自然语言，不要分点，不要生硬地列举\n- 长度控制在150~250字之间，适合语音朗读\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        560,
        40
      ],
      "id": "2fa27d46-650d-44f7-bd32-cb77709b5fa7",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        660,
        280
      ],
      "id": "c21f2756-96cb-4dff-a48e-5b8cfa0a0bdb",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "swewjuzYX9Z3PE56",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.minimax.chat/v1/text_to_speech?GroupId=1941059747356615401",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"voice_id\": \"male-qn-qingse\",\n  \"text\": \"{{ $json.output.replaceAll('\\n', '\\\\\\\\n').replaceAll('\\r', '\\\\\\\\r') }}\",\n  \"model\": \"speech-01\",\n  \"speed\": 1.0,\n  \"vol\": 1.0,\n  \"pitch\": 0\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        40
      ],
      "id": "7c1a040e-19a6-4b8d-9ce6-a3598594bf54",
      "name": "HTTP Request",
      "credentials": {
        "httpBearerAuth": {
          "id": "I8QSFSxkG81f1eWI",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.inmoAppEventTrigger",
      "typeVersion": 1.1,
      "position": [
        -1240,
        220
      ],
      "id": "6918bfad-7734-4027-b5c4-ce12d4e0409b",
      "name": "When INMO App Event is Received",
      "webhookId": "a146294a-0e2f-4188-b20a-2f88823a9060"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "=你是一位景区智能助手。请根据用户输入，判断以下两个内容，并用 JSON 返回：\n\n1. 用户的意图类型，只能是以下两个值之一：\n   - 查询景点列表\n   - 讲解某个景点\n\n2. 如果意图是“讲解某个景点”，请提取该景点的名称（如“太和殿”）；否则，返回 null。\n\n请你只返回下面这个 JSON 结构，不能添加任何解释或多余内容：\n\n请只返回如下 JSON 格式：\n\n```json\n{\n  \"intent\": \"...\",\n  \"spot\": \"...\",\n  \"chatInput\": \"...\"\n}\n\n用户输入如下：\n{{ $json.chatInput }}\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -340,
        160
      ],
      "id": "64dac76c-e712-4581-a7dd-293c250b953f",
      "name": "OpenAI1识别意图1",
      "credentials": {
        "openAiApi": {
          "id": "swewjuzYX9Z3PE56",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "896799e0-ca49-4534-97b6-9f071545eea3",
              "leftValue": "={{ $json.files }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -720,
        300
      ],
      "id": "e2118c46-10a5-4d90-aa34-da631ea879f2",
      "name": "是否有附件"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.minimax.chat/v1/text_to_speech?GroupId=1941059747356615401",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"voice_id\": \"male-qn-qingse\",\n  \"text\": \"{{ $json.content.replaceAll('\\n', '\\\\\\\\n').replaceAll('\\r', '\\\\\\\\r') }}\",\n  \"model\": \"speech-01\",\n  \"speed\": 1.0,\n  \"vol\": 1.0,\n  \"pitch\": 0\n}\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        80,
        520
      ],
      "id": "2143a0ac-4f5d-4045-bd05-2b421c4827f7",
      "name": "HTTP Request1",
      "credentials": {
        "httpBearerAuth": {
          "id": "I8QSFSxkG81f1eWI",
          "name": "Bearer Auth account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1识别意图": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When INMO App Event is Received": {
      "main": [
        [
          {
            "node": "是否有附件",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1识别意图1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "是否有附件": {
      "main": [
        [
          {
            "node": "OpenAI1识别意图",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI1识别意图1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "78c85753-3429-4711-a658-cde2f7be90f6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b3e1c66506bd07262ef78d5a57dabb2c9f245886d101c3960f62eb73e7fd816d"
  },
  "id": "X95qKXtS2TLjWSdo",
  "tags": []
}